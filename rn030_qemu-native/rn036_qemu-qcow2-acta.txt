Working freebsd qcow2 on M1 macbook


_acta_q2f-test6.vm
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#!/bin/bash
set -euo pipefail

# -------- Config --------
IMAGE="${IMAGE:-FreeBSD-14.2-RELEASE-arm64-aarch64-zfs.qcow2}"
DISK_BUS="${DISK_BUS:-nvme}"   # nvme | scsi
VENDOR_ID="${VENDOR_ID:-0x0cf3}"
PRODUCT_ID="${PRODUCT_ID:-0x9271}"
LOG_ROOT="${LOG_ROOT:-$HOME/qemu-logs}"
RUN_TAG="$(date +"%Y%m%d-%H%M%S")"
RUN_DIR="${LOG_ROOT}/run-${RUN_TAG}"
USB_LOG="${RUN_DIR}/usb.log"
FULL_LOG="${RUN_DIR}/qemu-full.log"
EFI_FD="${EFI_FD:-QEMU_EFI.fd}"      # path to AArch64 EDK2 firmware
IFNAME="${IFNAME:-en18}"             # host NIC for vmnet-bridged
MON_SOCK="${RUN_DIR}/monitor.sock"   # UNIX monitor socket

mkdir -p "${RUN_DIR}"
echo "Logs will be in: ${RUN_DIR}"

need(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing '$1'"; exit 1; }; }
need qemu-system-aarch64
need ioreg

# Optional tools for monitor:
command -v nc >/dev/null 2>&1 || echo "Tip: install 'netcat' to use: nc -U ${MON_SOCK}"
command -v socat >/dev/null 2>&1 || true

# Elevate for USB permissions on macOS
if [[ $EUID -ne 0 ]]; then
  echo "Re-execing with sudo for USB access…"
  exec sudo --preserve-env=IMAGE,DISK_BUS,VENDOR_ID,PRODUCT_ID,LOG_ROOT,EFI_FD,RUN_TAG,RUN_DIR,USB_LOG,FULL_LOG,IFNAME,MON_SOCK "$0" "$@"
fi

# Check usb-host support
if ! qemu-system-aarch64 -device help | grep -qi 'usb-host'; then
  echo "ERROR: QEMU lacks usb-host (libusb). Try: brew reinstall qemu"; exit 1
fi

# Disk bus args
DISK_ARGS=()
if [[ "${DISK_BUS}" == "nvme" ]]; then
  DISK_ARGS+=(
    -drive if=none,file="${IMAGE}",format=qcow2,id=hd0
    -device nvme,serial=nvme0,id=nvme0
    -device nvme-ns,drive=hd0,bus=nvme0,nsid=1
  )
elif [[ "${DISK_BUS}" == "scsi" ]]; then
  DISK_ARGS+=(
    -device virtio-scsi-pci,id=scsi0
    -drive if=none,file="${IMAGE}",format=qcow2,id=hd0
    -device scsi-hd,drive=hd0
  )
else
  echo "ERROR: Unknown DISK_BUS='${DISK_BUS}'. Use 'nvme' or 'scsi'."; exit 1
fi

# Best-effort dongle presence hint
if ioreg -p IOUSB -l | grep -qiE 'idVendor.*3315|0x0cf3'; then
  echo "✓ Found vendor 0x0cf3 (Atheros) on host"
else
  echo "⚠️  Atheros 0x0cf3 not detected via ioreg; ensure the dongle is plugged in."
fi

# Tail USB log live
: > "${USB_LOG}"
echo "Tailing USB debug log: ${USB_LOG}"
tail -f "${USB_LOG}" &
TAIL_PID=$!
trap 'kill ${TAIL_PID} >/dev/null 2>&1 || true' EXIT

echo "Launching QEMU… (monitor socket: ${MON_SOCK})"
echo "Connect to monitor with:  nc -U ${MON_SOCK}   (then: info pci / info usb)"

set -x
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 2048 \
  -smp 4 \
  -nographic \
  -bios "${EFI_FD}" \
  "${DISK_ARGS[@]}" \
  -netdev vmnet-bridged,id=net0,ifname="${IFNAME}" \
  -device virtio-net-pci,netdev=net0 \
  -device qemu-xhci,id=xhci \
  -device usb-host,vendorid=${VENDOR_ID},productid=${PRODUCT_ID} \
  -monitor unix:"${MON_SOCK}",server,nowait \
  -d guest_errors \
  -D "${USB_LOG}" \
  -no-reboot 2>&1 | tee -a "${FULL_LOG}"
set +x

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++






WIFI inside freebsd qcow2
# =====================================================
# Setup Atheros AR9271 (otus) Wi-Fi on FreeBSD
# =====================================================

# 1. Verify USB device is present
usbconfig
# Expect to see something like:
# ugen0.2: <AR9271 802.11n Qualcomm Atheros Communications> at usbus0,...

# 2. Load the otus driver
kldload if_otus

# Check it attached
dmesg | tail -20
# Expect: otus0: <Atheros AR9271> on usbus0

# 3. Create wlan device
ifconfig wlan0 create wlandev otus0
ifconfig wlan0 up
ifconfig wlan0    # confirm it exists

# 4. Scan for networks
ifconfig wlan0 scan

# 5. Configure WPA supplicant
cat > /etc/wpa_supplicant.conf <<EOF
network={
    ssid="YourSSID"
    psk="YourPassword"
}
EOF

# 6. Connect to Wi-Fi
wpa_supplicant -i wlan0 -c /etc/wpa_supplicant.conf -B
dhclient wlan0

# Test connectivity
ifconfig wlan0
ping -c 3 8.8.8.8

# 7. Make it persistent (auto-load at boot)
echo 'if_otus_load="YES"' >> /boot/loader.conf

cat >> /etc/rc.conf <<EOF
wlans_otus0="wlan0"
ifconfig_wlan0="WPA DHCP"
EOF
