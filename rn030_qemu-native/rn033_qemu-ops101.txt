###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
INDEX  using ^^^ headings vs item content using ```
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################
###############################################################################################


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
^^^qas qemu access-and-setup

```qas1

```qas2 with bigger disk space for packages

```qas3 qemu with qcow2 and passthrough of USB wifi dongle

```clean-shutdown
sudo pkill -SIGTERM qemu-system-aarch64

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
^^^qpop qemu pure ops aka qpop#-name

```qpop1 qemu vm persist

```qpop2 resize-raw




```ip-address
stop disappearing ip address


04:55 greg@xcf16 /Users/0-qemu ? tmux new -s free246
[detached (from session free246)]
05:01 greg@xcf16 /Users/0-qemu ? tmux ls
free246: 1 windows (created Fri Jun 13 04:55:59 2025)
05:01 greg@xcf16 /Users/0-qemu ? 

...from within free246 tmux launch the ftest2.sh qemu launch scripting


```set-prompt
04:58 greg@xcf16 ~ % set prompt = "`date +%y%m%d-%H%M%S` %n@%m %~ ? "
250613-050020 greg@xcf16 ~ ? 
250613-050020 greg@xcf16 ~ ? 




xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
^^^qte tests-and-examples 

```qte-qpop1  test qpop1 qemu persist 20250915
















-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
CONTENT all ``` content
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------



...............................................................................................
...............................................................................................
...............................................................................................
^^^qemu access-and-setup
...............................................................................................
...............................................................................................
...............................................................................................
^^^qemu access-and-setup
...............................................................................................
...............................................................................................
...............................................................................................

_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```qas1 freebsd-demos1 
>>> capability1 >>>
copy and view log files in ufs from netgate ext USB w/ USB moved to mac to read on freebsd vm 
mac os native can not read ufs 

^^^
06:10 greg@xcf16 /Users/0-qemu ? sudo ./ftest1.vm 
^^^
boot to multi user

>>>capability2>>>
change prompt 
^^^
vi fix .cshrc add prompt alias
more .cshrc =
# alias grep    grep -d skip
alias precmd 'set prompt = "`date +%y%m%d-%H%M%S` %n@%m %/ _ "'

250607-133958 root@freebsd /root _ 

...preserved on reboot (write FS is now working)



first freebsd native vm   
06:08 greg@xcf16 /Users/0-qemu ? more ftest1.vm
#!/bin/bash

# Path to your raw disk image
IMAGE="FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw"

# Run QEMU
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 2048 \
  -smp 4 \
  -nographic \
  -bios QEMU_EFI.fd \
  -drive if=none,file="$IMAGE",format=raw,id=hd0 \
  -device virtio-blk-device,drive=hd0 \
  -netdev user,id=net0,hostfwd=tcp::3222-:22 \
  -device virtio-net-device,netdev=net0 \
  -no-reboot
06:10 greg@xcf16 /Users/0-qemu ? 

_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```as2-freebsd-demo2
#!/bin/bash

# Paths
DISK="freebsd-24G.raw"
ISO="FreeBSD-14.2-RELEASE-arm64-aarch64-bootonly.iso"
BIOS="QEMU_EFI.fd"

# Create disk image if it doesn't exist
if [ ! -f "$DISK" ]; then
  echo "[*] Creating 24G disk image: $DISK"
  qemu-img create -f raw "$DISK" 24G
fi

# Choose whether to boot installer or OS
if [ -f "$ISO" ] && [ ! -f ".vm_initialized" ]; then
  echo "[*] Booting from FreeBSD installer ISO..."
  BOOT_ISO="-cdrom $ISO"
else
  BOOT_ISO=""
fi

# Launch the VM
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 4096 \
  -smp 4 \
  -nographic \
  -bios "$BIOS" \
  $BOOT_ISO \
  -drive if=none,file="$DISK",format=raw,id=hd0 \
  -device virtio-blk-device,drive=hd0 \
  -netdev vmnet-bridged,id=net0,ifname=en18 \
  -device virtio-net-device,netdev=net0 \
  -no-reboot

# If ISO was used, mark VM as initialized (user removes this file to reinstall)
if [ -f "$ISO" ] && [ ! -f ".vm_initialized" ]; then
  touch .vm_initialized
fi


_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```as3 qemu qcow2 set up with USB wifi dongle pass through

03:36 greg@xcf16 /Users/0-qemu ? cat q2f-test6.vm 
#!/bin/bash
set -euo pipefail

# -------- Config --------
IMAGE="${IMAGE:-FreeBSD-14.2-RELEASE-arm64-aarch64-zfs.qcow2}"
DISK_BUS="${DISK_BUS:-nvme}"   # nvme | scsi
VENDOR_ID="${VENDOR_ID:-0x0cf3}"
PRODUCT_ID="${PRODUCT_ID:-0x9271}"
LOG_ROOT="${LOG_ROOT:-$HOME/qemu-logs}"
RUN_TAG="$(date +"%Y%m%d-%H%M%S")"
RUN_DIR="${LOG_ROOT}/run-${RUN_TAG}"
USB_LOG="${RUN_DIR}/usb.log"
FULL_LOG="${RUN_DIR}/qemu-full.log"
EFI_FD="${EFI_FD:-QEMU_EFI.fd}"      # path to AArch64 EDK2 firmware
IFNAME="${IFNAME:-en18}"             # host NIC for vmnet-bridged
MON_SOCK="${RUN_DIR}/monitor.sock"   # UNIX monitor socket

mkdir -p "${RUN_DIR}"
echo "Logs will be in: ${RUN_DIR}"

need(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing '$1'"; exit 1; }; }
need qemu-system-aarch64
need ioreg

# Optional tools for monitor:
command -v nc >/dev/null 2>&1 || echo "Tip: install 'netcat' to use: nc -U ${MON_SOCK}"
command -v socat >/dev/null 2>&1 || true

# Elevate for USB permissions on macOS
if [[ $EUID -ne 0 ]]; then
  echo "Re-execing with sudo for USB access…"
  exec sudo --preserve-env=IMAGE,DISK_BUS,VENDOR_ID,PRODUCT_ID,LOG_ROOT,EFI_FD,RUN_TAG,RUN_DIR,USB_LOG,FULL_LOG,IFNAME,MON_SOCK "$0" "$@"
fi

# Check usb-host support
if ! qemu-system-aarch64 -device help | grep -qi 'usb-host'; then
  echo "ERROR: QEMU lacks usb-host (libusb). Try: brew reinstall qemu"; exit 1
fi

# Disk bus args
DISK_ARGS=()
if [[ "${DISK_BUS}" == "nvme" ]]; then
  DISK_ARGS+=(
    -drive if=none,file="${IMAGE}",format=qcow2,id=hd0
    -device nvme,serial=nvme0,id=nvme0
    -device nvme-ns,drive=hd0,bus=nvme0,nsid=1
  )
elif [[ "${DISK_BUS}" == "scsi" ]]; then
  DISK_ARGS+=(
    -device virtio-scsi-pci,id=scsi0
    -drive if=none,file="${IMAGE}",format=qcow2,id=hd0
    -device scsi-hd,drive=hd0
  )
else
  echo "ERROR: Unknown DISK_BUS='${DISK_BUS}'. Use 'nvme' or 'scsi'."; exit 1
fi

# Best-effort dongle presence hint
if ioreg -p IOUSB -l | grep -qiE 'idVendor.*3315|0x0cf3'; then
  echo "✓ Found vendor 0x0cf3 (Atheros) on host"
else
  echo "⚠️  Atheros 0x0cf3 not detected via ioreg; ensure the dongle is plugged in."
fi

# Tail USB log live
: > "${USB_LOG}"
echo "Tailing USB debug log: ${USB_LOG}"
tail -f "${USB_LOG}" &
TAIL_PID=$!
trap 'kill ${TAIL_PID} >/dev/null 2>&1 || true' EXIT

echo "Launching QEMU… (monitor socket: ${MON_SOCK})"
echo "Connect to monitor with:  nc -U ${MON_SOCK}   (then: info pci / info usb)"

set -x
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 2048 \
  -smp 4 \
  -nographic \
  -bios "${EFI_FD}" \
  "${DISK_ARGS[@]}" \
  -netdev vmnet-bridged,id=net0,ifname="${IFNAME}" \
  -device virtio-net-pci,netdev=net0 \
  -device qemu-xhci,id=xhci \
  -device usb-host,vendorid=${VENDOR_ID},productid=${PRODUCT_ID} \
  -monitor unix:"${MON_SOCK}",server,nowait \
  -d guest_errors \
  -D "${USB_LOG}" \
  -no-reboot 2>&1 | tee -a "${FULL_LOG}"
set +x%
03:36 greg@xcf16 /Users/0-qemu ? 

...............................................................................................
...............................................................................................
...............................................................................................
^^^qpop qemu-pure-ops aka qpop#-name
...............................................................................................
...............................................................................................
...............................................................................................
^^^qpop qemu-pure-ops aka qpop#-name
...............................................................................................
...............................................................................................
...............................................................................................

_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```qpop1 qemu vm persist

USE TMUX - package in brew
tmux new -s NAME  
ctrl-b d to detach (or computer macos SLEEP and put away for awhile...)
to reattach to name>>>
tmux attach -t free246

It works:
1. tmux local session 2. launch qemu vm 3. macos to sleep 4. computer on shelf
5. day later open computer
6. new local session 7. tmux ls / it is still there
8. attach to the tmux name / qemu vm is still alive

ALSO create the tmux session with mouse scoll enabled:
tmux new -s mysession \; set -g mouse on
tmux new -s mfla3 \; set -g mouse on

_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```qpop2-resize-raw

qemu-img resize name.raw +10G

03:08 greg@xcf16 /Users/1-qemu ? qemu-img resize FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw +10G




#!/bin/bash

# Path to your raw disk image
IMAGE="FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw"

# Run QEMU
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 2048 \
  -smp 4 \
  -nographic \
  -bios QEMU_EFI.fd \
  -drive if=none,file="$IMAGE",format=raw,id=hd0 \
  -device virtio-blk-device,drive=hd0 \
  -netdev vmnet-bridged,id=net0,ifname=en18 \
  -device virtio-net-device,netdev=net0 \
  -no-reboot
03:08 greg@xcf16 /Users/1-qemu ? qemu-img resize FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw +10G
WARNING: Image format was not specified for 'FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw' and probing guessed raw.
         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.
         Specify the 'raw' format explicitly to remove the restrictions.
Image resized.
03:08 greg@xcf16 /Users/1-qemu ? ls -la
total 53789416
drwxrwxrwx  26 root  admin          832 Jun 24 03:02 .
drwxr-xr-x  18 root  admin          576 Jun 17 03:56 ..
-rwxrwxrwx   1 greg  admin          731 May 27 04:55 CHECKSUM.SHA512
-rwxrwxrwx   1 greg  admin   3820879872 May 27 03:35 FreeBSD-13.5-RELEASE-arm64-aarch64.qcow2
-rwxrwxrwx   1 greg  admin          146 May 27 03:31 FreeBSD-14.0-RELEASE-amd64-disc1.iso
-rwxrwxrwx   1 greg  admin          146 May 27 03:30 FreeBSD-14.0-RELEASE-arm64-disc1.iso
-rwxrwxrwx   1 greg  admin   3533373440 May 29 03:10 FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.qcow2
-rwxrwxrwx   1 greg  admin  17213994496 Jun 24 03:08 FreeBSD-14.2-RELEASE-arm64-aarch64-ufs.raw
-rwxrwxrwx   1 greg  admin     67108864 May 30 07:27 QEMU_EFI.fd
-rwxrwxrwx@  1 greg  admin    407044096 May 30 05:59 debian-12-nocloud-arm64.qcow2
-rwxrwxrwx@  1 greg  admin   3221225472 Jun 21 07:44 debian-12-nocloud-arm64.raw
-rwxrwxrwx   1 greg  admin          409 May 30 08:18 dtest1.sh
-rwxrwxrwx   1 greg  admin     67108864 May 30 07:26 edk2-aarch64-code.fd
-rwxrwxrwx   1 greg  admin   3820879872 May 27 05:06 freebsd135.qcow2
-rwxrwxrwx   1 greg  admin   3820879872 May 27 05:16 freebsd135x.qcow2
-rwxrwxrwx   1 greg  admin   3820879872 May 28 03:58 freebsd135y.qcow2
-rwxrwxrwx   1 greg  admin          440 May 30 08:30 ftest1.vm
-rwxrwxrwx   1 greg  admin          439 Jun  7 07:16 ftest2.vm
-rwxrwxrwx   1 greg  admin     67108864 May 29 03:43 pflash1.img
-rwxrwxrwx   1 greg  admin          787 May 27 05:21 qemutest1.sh
-rwxrwxrwx   1 greg  admin          846 May 28 03:34 test2vm.sh
-rwxrwxrwx   1 greg  admin          851 May 28 04:11 test3vm.sh
-rwxrwxrwx   1 greg  admin          871 May 29 03:38 test4vm.sh
-rwxrwxrwx   1 greg  admin          876 May 29 03:40 test5vm.sh
-rwxrwxrwx   1 greg  admin         1118 May 29 03:43 test6vm.sh
-rwxrwxrwx   1 greg  admin          760 May 28 02:41 testvm.sh
03:08 greg@xcf16 /Users/1-qemu ? 



















...............................................................................................
...............................................................................................
...............................................................................................
^^^qte qemu tests-and-examples 
^^^qte qemu tests-and-examples 
...............................................................................................
...............................................................................................
...............................................................................................
^^^qte qemu tests-and-examples 
^^^qte qemu tests-and-examples 
...............................................................................................
...............................................................................................
...............................................................................................





_______________________________________________________________________________________________
_______________________________________________________________________________________________
_______________________________________________________________________________________________
```qte-qpop1  test qpop1 qemu persist 20250915
```qpop1 qemu vm persist

USE TMUX - package in brew
tmux new -s NAME  
ctrl-b d to detach (or computer macos SLEEP and put away for awhile...)
to reattach to name>>>
tmux attach -t free246

It works:
1. tmux local session 2. launch qemu vm 3. macos to sleep 4. computer on shelf
5. day later open computer
6. new local session 7. tmux ls / it is still there
8. attach to the tmux name / qemu vm is still alive

ALSO create the tmux session with mouse scoll enabled:
tmux new -s mysession \; set -g mouse on
tmux new -s mfla3 \; set -g mouse on



