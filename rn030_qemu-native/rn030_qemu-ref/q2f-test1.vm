#!/bin/bash
set -euo pipefail

# -------- Config --------
IMAGE="${IMAGE:-FreeBSD-14.2-RELEASE-arm64-aarch64.qcow2}"

# Atheros AR9271 USB Wi-Fi (Atheros/Qualcomm)
VENDOR_ID="${VENDOR_ID:-0x0cf3}"
PRODUCT_ID="${PRODUCT_ID:-0x9271}"

MON_PORT="${MON_PORT:-55555}"
LOG_ROOT="${LOG_ROOT:-$HOME/qemu-logs}"
RUN_TAG="$(date +"%Y%m%d-%H%M%S")"
RUN_DIR="${LOG_ROOT}/run-${RUN_TAG}"

USB_LOG="${RUN_DIR}/usb.log"         # QEMU debug log target (-D)
FULL_LOG="${RUN_DIR}/qemu-full.log"  # Captured stdout/stderr via tee
EFI_FD="${EFI_FD:-QEMU_EFI.fd}"      # Adjust if needed
IFNAME="${IFNAME:-en18}"             # Host interface for vmnet-bridged

# -------- Setup --------
mkdir -p "${RUN_DIR}"
echo "Logs will be in: ${RUN_DIR}"

need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing '$1'"; exit 1; }; }
need qemu-system-aarch64
need ioreg
command -v telnet >/dev/null 2>&1 || echo "Note: 'telnet' not found; monitor still available at ${MON_PORT}"

# Elevate (USB access often needs root on macOS)
if [[ $EUID -ne 0 ]]; then
  echo "Re-execing with sudo for USB access…"
  exec sudo --preserve-env=IMAGE,VENDOR_ID,PRODUCT_ID,MON_PORT,LOG_ROOT,EFI_FD,RUN_TAG,RUN_DIR,USB_LOG,FULL_LOG,IFNAME "$0" "$@"
fi

# Check usb-host support
if ! qemu-system-aarch64 -device help | grep -qi 'usb-host'; then
  echo "ERROR: This QEMU lacks usb-host (libusb) support. Try: brew reinstall qemu"
  exit 1
fi

# Quick host-side presence hint
if ioreg -p IOUSB -l | grep -qiE 'idVendor.*3315|0x0cf3'; then
  echo "✓ Found vendor 0x0cf3 (Atheros) on host"
else
  echo "⚠️  Did not detect vendor 0x0cf3 via ioreg. Ensure the dongle is plugged in."
fi

# Clean exit handling for the tail process
TAIL_PID=""
cleanup() {
  [[ -n "${TAIL_PID}" ]] && kill "${TAIL_PID}" >/dev/null 2>&1 || true
}
trap cleanup EXIT

# Start tail (will follow once QEMU writes the file)
: > "${USB_LOG}"
echo "Tailing USB debug log: ${USB_LOG}"
tail -f "${USB_LOG}" &
TAIL_PID=$!

echo "Launching QEMU… (monitor: telnet 127.0.0.1:${MON_PORT})"
echo "> After boot:  telnet 127.0.0.1 ${MON_PORT}   # then run 'info pci' and 'info usb'"

set -x
qemu-system-aarch64 \
  -machine virt,highmem=off \
  -cpu host \
  -accel hvf \
  -m 2048 \
  -smp 4 \
  -nographic \
  -bios "${EFI_FD}" \
  \
  # --- Disk (qcow2, PCI) ---
  -drive if=none,file="${IMAGE}",format=qcow2,id=hd0 \
  -device virtio-blk-pci,drive=hd0 \
  \
  # --- Network (PCI) ---
  -netdev vmnet-bridged,id=net0,ifname="${IFNAME}" \
  -device virtio-net-pci,netdev=net0 \
  \
  # --- USB controller (PCIe) + passthrough ---
  -device qemu-xhci,id=xhci \
  -device usb-host,vendorid=${VENDOR_ID},productid=${PRODUCT_ID} \
  \
  # --- Monitor & logging ---
  -monitor telnet:127.0.0.1:${MON_PORT},server,nowait \
  -d guest_errors \
  -trace events=usb_* \
  -D "${USB_LOG}" \
  -no-reboot 2>&1 | tee -a "${FULL_LOG}"
set +x